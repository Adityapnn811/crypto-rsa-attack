from Crypto.Util.number import * 
from factorize import factorize
from decryptRSA import decryptRSA
from decimal import *
from cuberoot import cube_root

def decryptA(n, e, c):
    # p and q very near
    p, q = factorize(n)
    m = decryptRSA(p, q, e, c, n)
    m_bytes = (long_to_bytes(m))

    return(m_bytes)
    

def decryptB(n, e, c):
    # p == q
    getcontext().prec = 1024
    p = int(Decimal(n).sqrt()) # p = q = sqrt(n)
    # TODO: find out why phi is (p)*(p - 1) instead of (p-1)*(p-1)
    phi = (p)*(p - 1)
    d = inverse(e, phi)
    m = pow(c, d, n)
    m_bytes = (long_to_bytes(m))

    return(m_bytes)


def decryptC(n, e, c):
    # e == d
    m = pow(c, e, n)
    m_bytes = (long_to_bytes(m))

    return(m_bytes)


def decryptD(n, e, c):
    # e == 3
    m = int(cube_root(c))
    m_bytes = (long_to_bytes(m))

    return(m_bytes)


def decryptE(n, e, c):
    print('decryptE')
    print(n, e, c)
    return('')

n = 20175046099652918566155076042708095536469278688470477999405571005203481809134217860271803864729138025014396091144206521454661256195047082486505291521885452945157863730327317864119433839101901089015104665709034822856654376086242548332039717072319227079479486316166503517277145486415549714080111623820188316317568302258123686427603500092841168925626855446860453569437220560101160277954175913675090559860702312970565153292528260919122294484005015850803764734894103439726739073058307740905942551320870143642618748948783864397937789863540722808713225195637240852952125536216795371851356173614394245393731097146518269899241
e = 65537
c = 2043892003754054507554002936240593416153524024710518114925635796364046485529248391063455830170076641385004726912889558349950595446606213455416154927992477317140383541889901350295924909737633539643105354431040229301961970776383704049804126503518008066792558920941514708730889684541748826253766825801607619425151334448705548959861342981412577568035474352764747589363804262182099817150829809047960721107314586621834675756723623558403960681638576173688104010308304153934049391380729346618702211629381481943379924058628439190405184786157014054122557060971213237135886676539421273917319885022994997374245520152738199688574

print(decryptB(n, e, c))